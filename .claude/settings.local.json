{
  "permissions": {
    "allow": [
      "Bash(uv init --python \">=3.13\")",
      "Bash(mkdir -p src/data/connectors src/data/models src/patterns/detectors src/patterns/indicators src/patterns/models src/analysis src/visualization src/storage src/utils tests)",
      "Bash(mkdir -p data/csv)",
      "Bash(uv run python main.py --symbols EXAMPLE --start-date 2024-01-01 --end-date 2024-02-20 --no-charts)",
      "Bash(uv run python main.py --symbols EXAMPLE --start-date 2024-01-01 --end-date 2024-02-20 --no-charts --no-summary)",
      "Bash(cd \"C:\\quant\\strategy\\PatternScout\\pattern-scout\")",
      "Bash(uv run python main.py --symbols RBL8-15min)",
      "Bash(dir \"dataset\\patterns\" /b)",
      "Bash(ls -la \"dataset/patterns/719f71d9-3d1c-4182-a1f0-e25f54473e72.json\")",
      "Bash(rm -rf dataset/patterns/* charts/*)",
      "Bash(rm -f dataset/patterns.db)",
      "Bash(uv run python main.py --symbols RBL8-15min --no-charts --no-summary)",
      "Bash(uv run python professional_charts.py)",
      "Bash(uv run python main.py --symbols RBL8-15min --pattern-types flag,triangle_flag --no-charts)",
      "Bash(uv run python main.py --symbols RBL8-15min --pattern-types flag triangle_flag --no-charts)",
      "Bash(uv run python main.py --symbols RBL8-15min --pattern-types flag triangle_flag)",
      "Bash(rm -rf charts/* dataset/patterns/* dataset/patterns.db logs/*)",
      "Bash(cd \"C:\\quant\\strategy\\PatternScout\\pattern-scout\\dataset\\patterns\")",
      "Bash(echo \"JSON数据集文件总数: $(ls -1 *.json | wc -l)\")",
      "Bash(cd \"C:\\quant\\strategy\\PatternScout\\pattern-scout\\charts\\flag\")",
      "Bash(echo \"TradingView图表文件总数: $(ls -1 *.png | wc -l)\")",
      "Bash(rm -rf charts/*)",
      "Bash(ls charts/flag/)",
      "Bash(ls dataset/patterns/)",
      "Bash(ls charts/triangle_flag/)",
      "Bash(grep -l \"triangle_flag\" dataset/patterns/*.json)",
      "Bash(rm -f charts/flag/*.png)",
      "Bash(rm -f dataset/patterns/*.json)",
      "Bash(uv run python main.py --no-summary)",
      "Bash(uv run python unified_chart_generator.py)",
      "Bash(ls -la charts/)",
      "Bash(uv run python test_improved_detector.py)",
      "Bash(uv run python test_improved_simple.py)",
      "Bash(rm -f \"src/patterns/detectors/improved_flag_detector.py\")",
      "Bash(uv run python main.py --symbols RBL8-15min --start-date 2024-01-01 --end-date 2024-12-31 --pattern-types flag --no-charts --no-summary)",
      "Bash(uv run python main.py --symbols RBL8-15min --start-date 2024-01-01 --end-date 2024-12-31 --pattern-types flag --no-summary)",
      "Bash(sqlite3 dataset/patterns.db \".schema\")",
      "Bash(mkdir -p src/patterns/base src/patterns/strategies src/patterns/config)",
      "Bash(cp src/patterns/detectors/flag_detector.py src/patterns/detectors/flag_detector_backup.py)",
      "Bash(ls -la \"C:\\quant\\strategy\\PatternScout\\pattern-scout\\nul\")",
      "Bash(echo $env:OS)",
      "Bash(ver)",
      "Bash(uv run python -m py_compile src/patterns/base/pattern_components.py src/patterns/detectors/flag_detector.py src/patterns/detectors/pennant_detector.py)",
      "Bash(uv run ruff check src/patterns/base/pattern_components.py src/patterns/detectors/flag_detector.py src/patterns/detectors/pennant_detector.py)",
      "Bash(uv run python -m pytest tests/test_algorithm_improvements.py -v)",
      "Bash(uv run python -m pytest tests/test_algorithm_improvements.py::TestImprovedFlagValidation -v)",
      "Bash(uv run python tests/run_tests.py)",
      "Bash(uv run python -c \"\nimport unittest\nimport sys\nsys.path.insert(0, ''.'')\n\n# 只运行核心算法相关的测试\nfrom tests.test_technical_indicators import *\nfrom tests.test_data_connectors import *\nfrom tests.test_pattern_detectors import *\n\nif __name__ == ''__main__'':\n    unittest.main(verbosity=2)\n\")",
      "Bash(grep -n \"sqlite3.connect(self.db_path)\" src/storage/dataset_manager.py)",
      "Bash(uv run python -m pytest tests/test_dataset_manager.py::TestDatasetManager::test_save_pattern -v)",
      "Bash(uv run python -m pytest tests/test_dataset_manager.py::TestDatasetManager::test_batch_save_patterns -v)",
      "Bash(uv run python -m pytest tests/test_dataset_manager.py -v)",
      "Bash(uv run python -m pytest tests/test_atr_adaptive.py::TestATRAdaptiveManager::test_volatility_analysis_low -v)",
      "Bash(uv run python -m pytest tests/test_atr_adaptive.py::TestATRAdaptiveManager::test_parameter_adaptation -v)",
      "Bash(uv run python -m pytest tests/test_atr_adaptive.py::TestATRAdaptiveIntegration::test_atr_adaptation_enabled_vs_disabled -v)",
      "Bash(uv run python -m pytest tests/test_atr_adaptive.py -v)",
      "Bash(uv run python main.py --config config_multi_timeframe.yaml --symbols RBL8 --pattern-types flag --min-confidence 0.2 --export-dataset json)",
      "Bash(rm -f output/data/patterns.db)",
      "Bash(rm -rf output/data/patterns/* output/charts/* output/data/exports/*)",
      "Bash(uv run python -c \"\nfrom src.visualization.chart_generator import ChartGenerator\nfrom src.storage.dataset_manager import DatasetManager\nfrom src.utils.config_manager import ConfigManager\n\nconfig = ConfigManager.load_config(''config_multi_timeframe.yaml'')\ndataset_manager = DatasetManager(config)\nchart_generator = ChartGenerator(config)\n\npatterns = dataset_manager.get_patterns_from_db()\nprint(f''从数据库获取到 {len(patterns)} 个形态'')\n\nif patterns:\n    chart_count = chart_generator.generate_classified_charts(patterns)\n    print(f''生成了 {chart_count} 个图表'')\n\")",
      "Bash(uv run python -c \"\nfrom src.visualization.chart_generator import ChartGenerator\nfrom src.storage.dataset_manager import DatasetManager\nfrom src.utils.config_manager import ConfigManager\n\nconfig_manager = ConfigManager(''config_multi_timeframe.yaml'')\nconfig = config_manager.config\ndataset_manager = DatasetManager(config)\nchart_generator = ChartGenerator(config)\n\npatterns = dataset_manager.get_patterns_from_db()\nprint(f''从数据库获取到 {len(patterns)} 个形态'')\n\nif patterns:\n    chart_count = chart_generator.generate_classified_charts(patterns)\n    print(f''生成了 {chart_count} 个图表'')\n\")",
      "Bash(uv run python -c \"\nfrom src.visualization.chart_generator import ChartGenerator\nfrom src.storage.dataset_manager import DatasetManager\nfrom src.utils.config_manager import ConfigManager\n\nconfig_manager = ConfigManager(''config_multi_timeframe.yaml'')\nconfig = config_manager.config\ndataset_manager = DatasetManager(config[''output''][''data_path''])\nchart_generator = ChartGenerator(config)\n\npatterns = dataset_manager.get_patterns_from_db()\nprint(f''从数据库获取到 {len(patterns)} 个形态'')\n\nif patterns:\n    chart_count = chart_generator.generate_classified_charts(patterns)\n    print(f''生成了 {chart_count} 个图表'')\n\")",
      "Bash(uv run python -c \"\nfrom src.visualization.chart_generator import ChartGenerator\nfrom src.storage.dataset_manager import DatasetManager\nfrom src.utils.config_manager import ConfigManager\n\nconfig_manager = ConfigManager(''config_multi_timeframe.yaml'')\nconfig = config_manager.config\ndataset_manager = DatasetManager(config[''output''][''data_path''])\nchart_generator = ChartGenerator(config)\n\npatterns = dataset_manager.query_patterns()\nprint(f''从数据库获取到 {len(patterns)} 个形态'')\n\nif patterns:\n    chart_count = chart_generator.generate_classified_charts(patterns)\n    print(f''生成了 {chart_count} 个图表'')\n\")",
      "Bash(ls -la output/data/patterns/)",
      "Bash(uv run python -c \"\nimport sqlite3\nconn = sqlite3.connect(''output/data/patterns.db'')\ncursor = conn.cursor()\ncursor.execute(''SELECT COUNT(*) FROM patterns'')\ncount = cursor.fetchone()[0]\nprint(f''数据库中的形态数量: {count}'')\n\ncursor.execute(''SELECT id, symbol, pattern_type, confidence_score FROM patterns LIMIT 5'')\npatterns = cursor.fetchall()\nprint(''前5个形态:'')\nfor p in patterns:\n    print(f''  {p[0][:8]}... {p[1]} {p[2]} 置信度:{p[3]:.3f}'')\nconn.close()\n\")",
      "Bash(uv run python -c \"\nfrom pathlib import Path\nimport json\nfrom src.visualization.chart_generator import ChartGenerator\nfrom src.utils.config_manager import ConfigManager\n\nconfig_manager = ConfigManager(''config_multi_timeframe.yaml'')\nconfig = config_manager.config\nchart_generator = ChartGenerator(config)\n\npattern_files = list(Path(''output/data/patterns'').glob(''*.json''))\nprint(f''找到 {len(pattern_files)} 个形态文件'')\n\nif pattern_files:\n    patterns = []\n    for file in pattern_files[:5]:  # 只处理前5个\n        with open(file, ''r'', encoding=''utf-8'') as f:\n            pattern_data = json.load(f)\n            patterns.append(pattern_data)\n    \n    print(f''加载了 {len(patterns)} 个形态数据'')\n    chart_count = chart_generator.generate_pattern_charts(patterns)\n    print(f''生成了 {chart_count} 个图表'')\n\")",
      "Bash(uv run python -c \"\nfrom pathlib import Path\nimport json\nfrom src.visualization.chart_generator import ChartGenerator\nfrom src.utils.config_manager import ConfigManager\nfrom src.data.connectors.csv_connector import CSVConnector\n\nconfig_manager = ConfigManager(''config_multi_timeframe.yaml'')\nconfig = config_manager.config\nchart_generator = ChartGenerator(config)\n\n# 获取数据连接器\nconnector = CSVConnector(config[''data_sources''][''csv''])\ndf = connector.get_data(''RBL8'')\n\npattern_files = list(Path(''output/data/patterns'').glob(''*.json''))\nprint(f''找到 {len(pattern_files)} 个形态文件'')\n\nif pattern_files:\n    chart_count = 0\n    for file in pattern_files[:5]:  # 只处理前5个\n        with open(file, ''r'', encoding=''utf-8'') as f:\n            pattern_data = json.load(f)\n        \n        try:\n            chart_path = chart_generator.generate_pattern_chart(pattern_data, df)\n            if chart_path:\n                chart_count += 1\n                print(f''生成图表: {chart_path}'')\n        except Exception as e:\n            print(f''生成图表失败: {e}'')\n    \n    print(f''总共生成了 {chart_count} 个图表'')\n\")",
      "Bash(uv run python -c \"\nfrom pathlib import Path\nimport json\nfrom src.visualization.chart_generator import ChartGenerator\nfrom src.utils.config_manager import ConfigManager\nfrom src.data.connectors.csv_connector import CSVDataConnector\n\nconfig_manager = ConfigManager(''config_multi_timeframe.yaml'')\nconfig = config_manager.config\nchart_generator = ChartGenerator(config)\n\n# 获取数据连接器\nconnector = CSVDataConnector(config[''data_sources''][''csv''])\nconnector.connect()\ndf = connector.get_data(''RBL8'')\n\npattern_files = list(Path(''output/data/patterns'').glob(''*.json''))\nprint(f''找到 {len(pattern_files)} 个形态文件'')\n\nif pattern_files:\n    chart_count = 0\n    for file in pattern_files[:3]:  # 只处理前3个\n        with open(file, ''r'', encoding=''utf-8'') as f:\n            pattern_data = json.load(f)\n        \n        try:\n            chart_path = chart_generator.generate_pattern_chart(pattern_data, df)\n            if chart_path:\n                chart_count += 1\n                print(f''生成图表: {chart_path}'')\n        except Exception as e:\n            print(f''生成图表失败 {file.name}: {e}'')\n    \n    print(f''总共生成了 {chart_count} 个图表'')\n\")",
      "Bash(uv run python -c \"\nfrom pathlib import Path\nimport json\nfrom src.visualization.chart_generator import ChartGenerator\nfrom src.utils.config_manager import ConfigManager\nfrom src.data.connectors.csv_connector import CSVDataConnector\n\nconfig_manager = ConfigManager(''config_multi_timeframe.yaml'')\nconfig = config_manager.config\nchart_generator = ChartGenerator(config)\n\n# 获取数据连接器\nconnector = CSVDataConnector(config[''data_sources''][''csv''][''directory''])\nconnector.connect()\ndf = connector.get_data(''RBL8'')\n\npattern_files = list(Path(''output/data/patterns'').glob(''*.json''))\nprint(f''找到 {len(pattern_files)} 个形态文件'')\n\nif pattern_files:\n    chart_count = 0\n    for file in pattern_files[:3]:  # 只处理前3个\n        with open(file, ''r'', encoding=''utf-8'') as f:\n            pattern_data = json.load(f)\n        \n        try:\n            chart_path = chart_generator.generate_pattern_chart(pattern_data, df)\n            if chart_path:\n                chart_count += 1\n                print(f''生成图表: {chart_path}'')\n        except Exception as e:\n            print(f''生成图表失败 {file.name}: {e}'')\n    \n    print(f''总共生成了 {chart_count} 个图表'')\n\")",
      "Bash(uv run python -c \"\nfrom pathlib import Path\nimport json\nimport pandas as pd\nfrom datetime import datetime\nfrom src.visualization.chart_generator import ChartGenerator\nfrom src.utils.config_manager import ConfigManager\nfrom src.data.connectors.csv_connector import CSVDataConnector\n\nconfig_manager = ConfigManager(''config_multi_timeframe.yaml'')\nconfig = config_manager.config\nchart_generator = ChartGenerator(config)\n\n# 获取数据连接器\nconnector = CSVDataConnector(config[''data_sources''][''csv''][''directory''])\nconnector.connect()\n\n# 获取全量数据\ndf = connector.get_data(''RBL8'', start_date=datetime(2020, 1, 1), end_date=datetime(2025, 12, 31))\nprint(f''加载了 {len(df)} 条数据'')\n\npattern_files = list(Path(''output/data/patterns'').glob(''*.json''))\nprint(f''找到 {len(pattern_files)} 个形态文件'')\n\nif pattern_files and len(df) > 0:\n    chart_count = 0\n    for file in pattern_files[:3]:  # 只处理前3个\n        with open(file, ''r'', encoding=''utf-8'') as f:\n            pattern_data = json.load(f)\n        \n        try:\n            chart_path = chart_generator.generate_pattern_chart(pattern_data, df)\n            if chart_path:\n                chart_count += 1\n                print(f''生成图表: {chart_path}'')\n        except Exception as e:\n            print(f''生成图表失败 {file.name}: {e}'')\n    \n    print(f''总共生成了 {chart_count} 个图表'')\n\")",
      "Bash(uv run python -c \"\nimport sqlite3\nimport pandas as pd\nfrom datetime import datetime\n\n# 统计分析\nconn = sqlite3.connect(''output/data/patterns.db'')\n\n# 总体统计\ntotal_patterns = pd.read_sql_query(''SELECT COUNT(*) as total FROM patterns'', conn).iloc[0][''total'']\nprint(f''## PatternScout 检测结果报告'')\nprint(f''生成时间: {datetime.now().strftime(\"\"%Y-%m-%d %H:%M:%S\"\")}'')\nprint(f''\\n### 总体统计'')\nprint(f''- 总检测形态数量: **{total_patterns}** 个'')\n\n# 置信度分布\nconfidence_stats = pd.read_sql_query(''SELECT MIN(confidence_score) as min_conf, MAX(confidence_score) as max_conf, AVG(confidence_score) as avg_conf FROM patterns'', conn)\nprint(f''- 置信度范围: {confidence_stats.iloc[0][\"\"min_conf\"\"]:.3f} - {confidence_stats.iloc[0][\"\"max_conf\"\"]:.3f}'')\nprint(f''- 平均置信度: {confidence_stats.iloc[0][\"\"avg_conf\"\"]:.3f}'')\n\n# 质量等级分布\nquality_dist = pd.read_sql_query(''SELECT pattern_quality, COUNT(*) as count FROM patterns GROUP BY pattern_quality'', conn)\nprint(f''\\n### 质量分布'')\nfor _, row in quality_dist.iterrows():\n    print(f''- {row[\"\"pattern_quality\"\"]}: {row[\"\"count\"\"]} 个'')\n\n# 置信度高的形态\nhigh_conf = pd.read_sql_query(''SELECT symbol, detection_date, confidence_score FROM patterns WHERE confidence_score > 0.75 ORDER BY confidence_score DESC LIMIT 10'', conn)\nprint(f''\\n### 高置信度形态 (前10个)'')\nfor _, row in high_conf.iterrows():\n    print(f''- {row[\"\"symbol\"\"]} - 置信度: {row[\"\"confidence_score\"\"]:.3f} - 检测时间: {row[\"\"detection_date\"\"][:10]}'')\n\nconn.close()\n\")",
      "Bash(uv run python -c \"\nfrom pathlib import Path\nimport json\nfrom src.visualization.chart_generator import ChartGenerator\nfrom src.utils.config_manager import ConfigManager\n\nconfig_manager = ConfigManager(''config_multi_timeframe.yaml'')\nconfig = config_manager.config\nchart_generator = ChartGenerator(config)\n\npattern_files = list(Path(''output/data/patterns'').glob(''*.json''))\nprint(f''找到 {len(pattern_files)} 个形态文件'')\n\nif pattern_files:\n    chart_count = 0\n    for file in pattern_files[:5]:  # 只处理前5个\n        with open(file, ''r'', encoding=''utf-8'') as f:\n            pattern_data = json.load(f)\n        \n        try:\n            chart_path = chart_generator.generate_pattern_chart_from_data(pattern_data)\n            if chart_path:\n                chart_count += 1\n                print(f''生成图表: {chart_path}'')\n        except Exception as e:\n            print(f''生成图表失败 {file.name}: {e}'')\n    \n    print(f''总共生成了 {chart_count} 个图表'')\n\")",
      "Bash(uv run python -c \"\nfrom pathlib import Path\nimport json\nimport matplotlib.pyplot as plt\nfrom src.visualization.chart_generator import ChartGenerator\nfrom src.utils.config_manager import ConfigManager\n\n# 设置中文字体\nplt.rcParams[''font.sans-serif''] = [''SimHei'', ''Microsoft YaHei'', ''Arial Unicode MS'']\nplt.rcParams[''axes.unicode_minus''] = False\n\nconfig_manager = ConfigManager(''config_multi_timeframe.yaml'')\nconfig = config_manager.config\nchart_generator = ChartGenerator(config)\n\npattern_files = list(Path(''output/data/patterns'').glob(''*.json''))\nprint(f''总共找到 {len(pattern_files)} 个形态文件'')\n\nsuccess_count = 0\nerror_count = 0\n\nfor i, file in enumerate(pattern_files):\n    if i < 3:  # 跳过已生成的前3个\n        print(f''跳过已生成: {file.name}'')\n        success_count += 1\n        continue\n        \n    with open(file, ''r'', encoding=''utf-8'') as f:\n        pattern_data = json.load(f)\n    \n    try:\n        chart_path = chart_generator.generate_pattern_chart_from_data(pattern_data)\n        if chart_path:\n            success_count += 1\n            print(f''[{i+1}/{len(pattern_files)}] 生成图表: {Path(chart_path).name}'')\n    except Exception as e:\n        error_count += 1\n        print(f''[{i+1}/{len(pattern_files)}] 生成失败 {file.name}: {str(e)[:50]}...'')\n\nprint(f''\\n生成完成! 成功: {success_count}, 失败: {error_count}'')\n\")",
      "Bash(ls -la output/charts/flag/)",
      "Bash(uv run python -c \"\nimport sqlite3\nimport pandas as pd\nfrom pathlib import Path\nfrom datetime import datetime\n\nprint(''# PatternScout 数据和图表生成完成报告'')\nprint(f''生成时间: {datetime.now().strftime(\"\"%Y-%m-%d %H:%M:%S\"\")}'')\nprint()\n\n# 数据统计\nconn = sqlite3.connect(''output/data/patterns.db'')\ntotal_patterns = pd.read_sql_query(''SELECT COUNT(*) as total FROM patterns'', conn).iloc[0][''total'']\n\nprint(''## 🎯 核心成果'')\nprint(f''- **检测形态数量**: {total_patterns} 个旗形形态'')\n\n# 图表统计\nchart_files = list(Path(''output/charts/flag'').glob(''*.png''))\nprint(f''- **生成图表数量**: {len(chart_files)} 个TradingView风格图表'')\n\n# JSON文件统计\njson_files = list(Path(''output/data/patterns'').glob(''*.json''))\nprint(f''- **数据文件数量**: {len(json_files)} 个JSON格式形态记录'')\n\nprint(f''\\n## 📊 质量分析'')\n\n# 置信度分析\nconfidence_stats = pd.read_sql_query(''SELECT MIN(confidence_score) as min_conf, MAX(confidence_score) as max_conf, AVG(confidence_score) as avg_conf FROM patterns'', conn)\nprint(f''- **置信度范围**: {confidence_stats.iloc[0][\"\"min_conf\"\"]:.3f} - {confidence_stats.iloc[0][\"\"max_conf\"\"]:.3f}'')\nprint(f''- **平均置信度**: {confidence_stats.iloc[0][\"\"avg_conf\"\"]:.3f}'')\n\n# 质量分布\nquality_dist = pd.read_sql_query(''SELECT pattern_quality, COUNT(*) as count FROM patterns GROUP BY pattern_quality ORDER BY count DESC'', conn)\nprint(f''\\n**质量等级分布**:'')\nfor _, row in quality_dist.iterrows():\n    percentage = (row[''count''] / total_patterns) * 100\n    print(f''- {row[\"\"pattern_quality\"\"]}: {row[\"\"count\"\"]} 个 ({percentage:.1f}%)'')\n\nprint(f''\\n## 🔧 技术特性'')\nprint(''- **ATR自适应参数系统**: 根据市场波动率自动调整检测参数'')\nprint(''- **RANSAC鲁棒拟合**: 提供抗异常值的趋势线拟合'')\nprint(''- **多时间周期检测**: 15分钟数据专用短周期策略'')\nprint(''- **TradingView风格图表**: 专业级可视化呈现'')\n\nprint(f''\\n## 📁 输出文件结构'')\nprint(''```'')\nprint(''output/'')\nprint(''├── data/'')\nprint(''│   ├── patterns.db          # SQLite数据库'')\nprint(''│   └── patterns/            # {len(json_files)} 个JSON文件'')\nprint(''└── charts/'')\nprint(f''    └── flag/                # {len(chart_files)} 个PNG图表'')\nprint(''```'')\n\nprint(f''\\n## ✅ 解决的关键问题'')\nprint(''1. **图表生成修复**: 找到并使用正确的API方法 `generate_pattern_chart_from_data()`'')\nprint(''2. **中文字体警告**: 识别并处理matplotlib中文字符渲染问题'')\nprint(''3. **数据格式兼容**: 解决PatternRecord对象和字典数据的转换问题'')\nprint(''4. **批量处理优化**: 实现58个形态的高效批量图表生成'')\n\nhigh_conf = pd.read_sql_query(''SELECT symbol, detection_date, confidence_score FROM patterns WHERE confidence_score > 0.75 ORDER BY confidence_score DESC LIMIT 5'', conn)\nprint(f''\\n## 🏆 顶级形态 (置信度>0.75)'')\nfor i, row in high_conf.iterrows():\n    print(f''{i+1}. **置信度 {row[\"\"confidence_score\"\"]:.3f}** - {row[\"\"symbol\"\"]} - {row[\"\"detection_date\"\"][:10]}'')\n\nconn.close()\n\nprint(f''\\n---'')\nprint(''🎉 **PatternScout数据和图表生成任务圆满完成！**'')\n\")",
      "Bash(uv run python -c \"\nimport sqlite3\nimport pandas as pd\nfrom pathlib import Path\nfrom datetime import datetime\n\nprint(''# PatternScout 数据和图表生成完成报告'')\nprint(f''生成时间: {datetime.now().strftime(\"\"%Y-%m-%d %H:%M:%S\"\")}'')\nprint()\n\n# 数据统计\nconn = sqlite3.connect(''output/data/patterns.db'')\ntotal_patterns = pd.read_sql_query(''SELECT COUNT(*) as total FROM patterns'', conn).iloc[0][''total'']\n\nprint(''## 核心成果'')\nprint(f''- 检测形态数量: {total_patterns} 个旗形形态'')\n\n# 图表统计\nchart_files = list(Path(''output/charts/flag'').glob(''*.png''))\nprint(f''- 生成图表数量: {len(chart_files)} 个TradingView风格图表'')\n\n# JSON文件统计\njson_files = list(Path(''output/data/patterns'').glob(''*.json''))\nprint(f''- 数据文件数量: {len(json_files)} 个JSON格式形态记录'')\n\nprint(f''\\n## 质量分析'')\n\n# 置信度分析\nconfidence_stats = pd.read_sql_query(''SELECT MIN(confidence_score) as min_conf, MAX(confidence_score) as max_conf, AVG(confidence_score) as avg_conf FROM patterns'', conn)\nprint(f''- 置信度范围: {confidence_stats.iloc[0][\"\"min_conf\"\"]:.3f} - {confidence_stats.iloc[0][\"\"max_conf\"\"]:.3f}'')\nprint(f''- 平均置信度: {confidence_stats.iloc[0][\"\"avg_conf\"\"]:.3f}'')\n\n# 质量分布\nquality_dist = pd.read_sql_query(''SELECT pattern_quality, COUNT(*) as count FROM patterns GROUP BY pattern_quality ORDER BY count DESC'', conn)\nprint(f''\\n质量等级分布:'')\nfor _, row in quality_dist.iterrows():\n    percentage = (row[''count''] / total_patterns) * 100\n    print(f''- {row[\"\"pattern_quality\"\"]}: {row[\"\"count\"\"]} 个 ({percentage:.1f}%)'')\n\nhigh_conf = pd.read_sql_query(''SELECT symbol, detection_date, confidence_score FROM patterns WHERE confidence_score > 0.75 ORDER BY confidence_score DESC LIMIT 5'', conn)\nprint(f''\\n## 顶级形态 (置信度>0.75)'')\nfor i, row in high_conf.iterrows():\n    print(f''{i+1}. 置信度 {row[\"\"confidence_score\"\"]:.3f} - {row[\"\"symbol\"\"]} - {row[\"\"detection_date\"\"][:10]}'')\n\nconn.close()\n\nprint(f''\\n---'')\nprint(''PatternScout数据和图表生成任务圆满完成！'')\n\")"
    ],
    "deny": []
  }
}